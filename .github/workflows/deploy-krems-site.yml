name: Build and Deploy Krems Site

on:
  push:
    branches:
      - main # Or user's default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to commit config.yaml and for gh-pages action
      pages: write    # Needed for gh-pages action to deploy
      id-token: write # Needed for OIDC with gh-pages action (best practice)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Important for committing back config.yaml

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21' # Specify your Go version

      - name: Build Krems from source
        run: |
          go build -o krems .
          chmod +x ./krems
          echo "Krems version from source: $(./krems --version || echo 'version flag not supported or krems not executable')"

      - name: Configure Git User
        run: |
          git config user.name "GitHub Action Bot"
          git config user.email "actions@github.com"
          
      - name: Generate config.yaml if it does not exist
        id: generate_config
        run: |
          set -e
          if [ -f config.yaml ]; then
            echo "config.yaml found. Skipping generation."
            echo "config_existed=true" >> $GITHUB_OUTPUT
          else
            echo "config.yaml not found. Generating initial version..."
            echo "config_existed=false" >> $GITHUB_OUTPUT
            
            SITE_NAME="My Blog" # Default for user sites
            # For mreider/krems itself, config.yaml should exist and this block will be skipped.
            # If this workflow is used in a new repo without config.yaml:
            REPO_OWNER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
            
            # Determine BasePath for GitHub Pages project sites
            # If it's a user page (REPO_NAME == REPO_OWNER.github.io), BasePath is empty
            # Otherwise, BasePath is /REPO_NAME
            BASE_PATH=""
            if [[ "${REPO_NAME,,}" != "${REPO_OWNER,,}.github.io" ]]; then
              BASE_PATH="/${REPO_NAME}"
            fi
            
            WEBSITE_URL="https://${REPO_OWNER}.github.io${BASE_PATH}"


            echo "name: \"${SITE_NAME}\"" > config.yaml
            echo "website:" >> config.yaml
            echo "  url: \"${WEBSITE_URL}\"" >> config.yaml
            echo "  name: \"${SITE_NAME}\"" >> config.yaml
            echo "  basePath: \"${BASE_PATH}\"" >> config.yaml
            echo "menu:" >> config.yaml
            echo "  - name: Home" >> config.yaml
            echo "    url: /" >> config.yaml

            # Auto-generate menu items from top-level directories
            find . -maxdepth 1 -mindepth 1 -type d \
              ! -name ".*" \
              ! -name "docs" \
              ! -name "assets" \
              ! -name "node_modules" \
              ! -name "vendor" \
              -print0 | while IFS= read -r -d $'\0' dir; do
              DIR_NAME=$(basename "$dir")
              # Capitalize first letter and replace hyphens/underscores with spaces
              MENU_NAME=$(echo "$DIR_NAME" | sed -e 's/[_-]/ /g' -e 's/\b\(.\)/\u\1/g')
              echo "  - name: \"${MENU_NAME}\"" >> config.yaml
              echo "    url: /${DIR_NAME}/" >> config.yaml
            done
            
            echo "Generated config.yaml:"
            cat config.yaml
            
            git add config.yaml
            if git diff --staged --quiet; then
              echo "No changes to commit for config.yaml."
            else
              git commit -m "feat: Generate initial config.yaml [skip ci]"
              git push origin HEAD:${{ github.ref_name }}
            fi
          fi

      - name: Run Krems to build website
        run: |
          set -e
          echo "Building website with locally built Krems..."
          ./krems --build 
          echo "Website built. Contents of ./docs:"
          ls -R docs

      - name: Generate CNAME file for custom domain (if applicable)
        run: |
          set -e
          # Check if config.yaml exists; if not, this step might not be relevant
          if [ ! -f config.yaml ]; then
            echo "config.yaml not found, skipping CNAME generation."
            exit 0
          fi

          WEBSITE_LINE=$(grep '^  url:' config.yaml || echo "") # Assuming url is under website:
          BASEPATH_LINE=$(grep '^  basePath:' config.yaml || echo "")

          WEBSITE_URL_FROM_CONFIG=$(echo "$WEBSITE_LINE" | sed -n 's/  url: "\(.*\)"/\1/p')
          if [ -z "$WEBSITE_URL_FROM_CONFIG" ]; then WEBSITE_URL_FROM_CONFIG=$(echo "$WEBSITE_LINE" | sed -n "s/  url: '\(.*\)'/\1/p"); fi
          if [ -z "$WEBSITE_URL_FROM_CONFIG" ]; then WEBSITE_URL_FROM_CONFIG=$(echo "$WEBSITE_LINE" | sed -n 's/  url: \(.*\)/\1/p'); fi

          # Extract domain from WEBSITE_URL_FROM_CONFIG for CNAME
          # This logic assumes WEBSITE_URL_FROM_CONFIG is the full URL like https://example.com or https://user.github.io/repo
          
          # Check if it's a custom domain (i.e., not a github.io URL if we are NOT generating for a user page)
          # For CNAME, we only care if the URL is not a github.io one.
          DOMAIN_FOR_CNAME=""
          if [[ "$WEBSITE_URL_FROM_CONFIG" == "http"* ]]; then
            TEMP_DOMAIN=$(echo "$WEBSITE_URL_FROM_CONFIG" | sed -e 's|^https\?://||' -e 's|/.*$||') # Extracts host part
            if [[ "$TEMP_DOMAIN" != *".github.io"* ]]; then
              DOMAIN_FOR_CNAME=$TEMP_DOMAIN
            fi
          fi
          
          if [ -n "$DOMAIN_FOR_CNAME" ]; then
            echo "Custom domain for CNAME detected: $DOMAIN_FOR_CNAME"
            echo "$DOMAIN_FOR_CNAME" > docs/CNAME
            echo "CNAME file created in docs/ with content: $DOMAIN_FOR_CNAME"
          else
            echo "Not a custom domain or URL not parsable for CNAME. No CNAME file generated. Removing if exists."
            rm -f docs/CNAME
          fi

      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages 
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy: ${{ github.event.head_commit.message }} [skip ci]'
